--[[ Locals ]]--
heroVelocity = vmath.vector3(0,0,0)
local velocityGoal = vmath.vector3(0,0,0)
local normSpeed = 0
local collisions = {}
local curAnim = 1
local angleQuat = 0
local swingDist = 50
local collision_hash = hash("contact_point_response")
local weaponPosOffset = vmath.vector3(0, -5, 0)
heroCollisionVector = vmath.vector3()

--[[ Individual Properties ]]--
go.property("attackDelay", 0)
go.property("delayMax", 100)
go.property("speed", 250)
go.property("velocityDelta", .2)


function init(self)
	normSpeed = self.speed * math.sqrt(2) / 2  --Speed when moving diagonally
end

function update(self, dt)
	if math.abs(heroVelocity.x) + math.abs(heroVelocity.y) > 20 then
		if curAnim ~= 1 then
			msg.post("#sprite", "play_animation", {id = hash("run_left")})
			curAnim = 1
		end
	else
		if curAnim ~= 2 then
			msg.post("#sprite", "play_animation", {id = hash("idle_left")})
			curAnim = 2	
		end
	end
	sprite.set_hflip("#sprite", not _PlayerFacingLeft)
	
	

	-------------------------------------
	--Updating velocityGoal to reflect player input--  Should this come after recieving input for this frame?
	if _ControlAxisVert == 0 and _ControlAxisHor == 0 then velocityGoal = vmath.vector3(0,0,0)  						--no movement
	elseif _ControlAxisVert < 0 and _ControlAxisHor == 0 then velocityGoal = vmath.vector3(0,-self.speed,0)			--Down
	elseif _ControlAxisVert > 0 and _ControlAxisHor == 0 then velocityGoal = vmath.vector3(0,self.speed,0)			--Up
	elseif _ControlAxisVert == 0 and _ControlAxisHor > 0 then velocityGoal = vmath.vector3(self.speed,0,0)			--Right
	elseif _ControlAxisVert == 0 and _ControlAxisHor < 0 then velocityGoal = vmath.vector3(-self.speed,0,0)			--Left
	elseif _ControlAxisVert > 0 and _ControlAxisHor > 0 then velocityGoal = vmath.vector3(normSpeed,normSpeed,0)		--Up-Right
	elseif _ControlAxisVert > 0 and _ControlAxisHor < 0 then velocityGoal = vmath.vector3(-normSpeed,normSpeed,0)	--Up-Left
	elseif _ControlAxisVert < 0 and _ControlAxisHor > 0 then velocityGoal = vmath.vector3(normSpeed,-normSpeed,0) 	--Down-Right
	elseif _ControlAxisVert < 0 and _ControlAxisHor < 0 then velocityGoal = vmath.vector3(-normSpeed,-normSpeed,0)	--Down-Left
	end

	
	--Changes the velocity so that movement 
	--is smooth, velocityDelta determines the 
	--amount of change per frame
	heroVelocity = vmath.lerp(self.velocityDelta, heroVelocity, velocityGoal)
	
	--resets the input-axes to their volatile state
	_ControlAxisVert = 0
	_ControlAxisHor = 0
	
	-------------------------------------
	--Updates the position of the player object 
	--depending on the velocity determined above
	--Position in algorithm???
	------------------------------------
	
	

	
	-------------------------------------
	--Iterates through the collision messages, 
	--ignoring messages with a negative distance
	--and adjusting for those that are valid
	-------------------------------------
	for i = 1, #collisions do
	
	
		--------------PLACEHOLDER
		--Iterate through collisions, checking the normals for redundancy, and discarding all except the (most recent)(highest distance?) one
		--to attempt to resolve jitter
		
		
		local collisionNorm = collisions[i]["normal"]
		local collisionDist = collisions[i]["distance"]

		if collisionDist > 0 then
			heroCollisionVector = heroCollisionVector + collisionNorm * collisionDist
		end

		
		collisions[i] = nil
	end
	--[[
	if heroCollisionVector.x > 0 and velocity.x < 0 then 
		velocityGoal = vmath.vector3(0,velocityGoal.y,0)
		velocity = vmath.vector3(0,velocity.y,0)
	elseif heroCollisionVector.x < 0 and velocity.x > 0 then 
		velocityGoal = vmath.vector3(0,velocityGoal.y,0)
		velocity = vmath.vector3(0,velocity.y,0)
	end
	if heroCollisionVector.y > 0 and velocity.y < 0 then 
		velocityGoal = vmath.vector3(velocityGoal.x, 0 ,0)
		velocity = vmath.vector3(velocity.x,0,0)
	elseif heroCollisionVector.y < 0 and velocity.y > 0 then
		velocityGoal = vmath.vector3(velocityGoal.x, 0,0)
		velocity = vmath.vector3(velocity.x,0,0)
	end--]]
	local frameVelocity = heroVelocity * dt
	local netChange = heroCollisionVector + frameVelocity
	
	go.set_position(go.get_position() + netChange)
	heroCollisionVector = vmath.vector3(0)
	
	if self.attackDelay <= 0 then
		if _Attack == true then
			_AttackMousePos.x = _MousePos.x
			_AttackMousePos.y = _MousePos.y
			offsetVec = vmath.vector3( swingDist * math.cos(_WeaponAngle), swingDist * math.sin(_WeaponAngle), 0)
			factory.create("main:/hero_collection/attack_spawner#factory", go.get_position() + offsetVec, _WeaponAngleQuat)
			self.attackDelay = self.delayMax
			msg.post("main:/hero_collection/weapon#script", "attack")
		end
	else
		_Attack = false
		self.attackDelay = self.attackDelay - 1
	end

	_HeroPos = go.get_position(".")
	local camWorldPos = vmath.vector3(_HeroPos.x - (_SCREEN_WIDTH / 2), _HeroPos.y - (_SCREEN_HEIGHT / 2), 0)
	local camAvgPos = vmath.vector3(camWorldPos.x + (_MousePos.x-(_SCREEN_WIDTH / 2))/8, camWorldPos.y + (_MousePos.y - (_SCREEN_HEIGHT / 2))/8, 0) 
	go.set_position(vmath.lerp(.15, go.get_position("/camera#camera"), camAvgPos), "/camera#camera")
	_CamPos = go.get_position("/camera#camera")
end

function on_message(self, message_id, message, sender)
	if message_id == collision_hash then
		if message.group == hash('walls') then
			if (message.distance * message.normal.x > heroCollisionVector.x and heroCollisionVector.x >= 0)  or
			(message.distance * message.normal.x < heroCollisionVector.x and heroCollisionVector.x <= 0) then
				heroCollisionVector.x = message.normal.x * message.distance
			end
			if (message.distance * message.normal.y > heroCollisionVector.y and heroCollisionVector.y >= 0)  or
			(message.distance * message.normal.y < heroCollisionVector.y and heroCollisionVector.y <= 0) then
				heroCollisionVector.y = message.normal.y * message.distance
			end
		end 
	end
	if message_id == hash("offset") then
		angleQuat = message.angleQuat
		angleRad = message.angleRad
	end
end


