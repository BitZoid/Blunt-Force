--[[ Locals ]]--
local adjustment = vmath.vector3(0,-6,0)
local sprite1Url = msg.url("main:/hero_collection/weapon#sprite1") -- shovel
local sprite2Url = msg.url("main:/hero_collection/weapon#sprite2") -- hand
local sprite3Url = msg.url("main:/hero_collection/weapon#sprite3") -- hand
local angleOffsetOriginal = .5
local angleOffset

--[[ Instance Properties ]]--
go.property("angle", 0)

function init(self)
	angleOffset= angleOffsetOriginal
end

function update(self, dt)
	self.angle = math.atan2(_MousePos.y + _CamPos.y - _WeaponPos.y, _MousePos.x  + _CamPos.x - _WeaponPos.x)
	angleQuat = vmath.quat_axis_angle(vmath.vector3(0, 0,1), self.angle - (math.pi) + angleOffset)
	go.set_rotation(angleQuat)
	
	if angleOffsetOriginal ~= angleOffset then
		if _PlayerFacingLeft then
			angleOffset= angleOffsetOriginal - ( go.get("/hero_collection/hero#script", "attackDelay") / go.get("/hero_collection/hero#script", "delayMax") * angleOffsetOriginal *2)
		else
			angleOffset= -angleOffsetOriginal + ( go.get("/hero_collection/hero#script", "attackDelay") / go.get("/hero_collection/hero#script", "delayMax") * angleOffsetOriginal *2)
		end
	end


	go.set_position(_HeroPos + adjustment) --move to player script?
	msg.post("/hero_collection/hero#script", "offset", {angleQuat = vmath.quat_axis_angle(vmath.vector3(0, 0,1), self.angle - (math.pi)), angleRad = self.angle})
	
	sprite.set_vflip(sprite1Url, not _PlayerFacingLeft)
	sprite.set_vflip(sprite2Url, not _PlayerFacingLeft)
	sprite.set_vflip(sprite3Url, not _PlayerFacingLeft)
	
	sprite.set_hflip(sprite2Url, _CursorAbove)
	sprite.set_hflip(sprite3Url, _CursorAbove)
end

function on_message(self, message_id, message, sender)
	--[[if message_id == hash("facingLeft") then
		if message.facingLeft == true then
			facingL = true
			--adjustment = vmath.vector3(-5.25,-6,0)
		else
			facingL = false
			--adjustment = vmath.vector3(5.25,-6,0)
		end
	end--]]
	--[[
	if message_id == hash("m1_click") then
		attacked = true
		angleOffset= -angleOffset
	end--]]
	if message_id == hash("reflected") then
		propertiesTable = {			
			speedMultiplier = 1,
			lifespanMultiplier = .7
		}
		callback = function()
			bulletProto.newBullet(bulletProto.bulletTypes.bullet_1,  
				go.get(".", "position"), 
				enemyProto.derivativeDirection(enemyProto.randomDirection(), -100, 100),
				200 + enemyProto.randomFloat(-20, 20), 1, 2,
				function()
					print("callback_2")
				end
			)
		end
		weaponProto.reflectBullet( callback, 9, propertiesTable, sender)
	end
end



