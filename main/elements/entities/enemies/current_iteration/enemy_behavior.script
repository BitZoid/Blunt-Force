require "modules.enemy_prototype"--AKA enemyProto
require "modules.bullet_prototype" --AKA bulletProto
go.property("waitB", 0)
go.property("waitS", 0)
go.property("shooting", false)

go.property("Speed", 900)
go.property("Range", 400)
go.property("Health", 15)
go.property("PointValue", 100)
go.property("ShootingPatternID", 1)
go.property("BulletType", 1)
go.property("IdleBehaviorsID", 1)
go.property("TrackingBehaviorsID", 1)


function init(self)
	--[[
	self.Speed = 100 --movement speed
	self.RANGE = 400 --player tracking range

	self.Health = 15
	self.PointValue = 100
	self.ShootingPatternID = 0
	self.BulletType = bulletProto.bulletTypes.bullet_1
	--]]
	self.behaviorQueue = {}
	self.velocity = vmath.vector3(0)
	self.velocityGoal = vmath.vector3(0)
	self.currentBehaviorCompleted = true
	self.currentDirection = vmath.vector3(0,0,0)
	self.curAnim = 2
	self.velocityInitial = vmath.vector3(0)
	self.duration = 0
	self.previousDirection = vmath.vector3(0)
	self.collisions = {}
	self.t = 0
	self.playerVisible = false
	self.tracking = false
	
	self.idleBehaviors = _IdleBehaviors[self.IdleBehaviorsID]
	self.trackingBehaviors = _TrackingBehaviors[self.TrackingBehaviorsID]
end

function final(self)
end


function update(self, dt)
	local bulletURL = bulletProto.bulletTypes[self.BulletType]
	local playerPos = go.get("/hero_collection/hero", "position") --gets the player's position
	local selfPos = go.get(".", "position") --stores the current position

	if self.playerVisible and enemyProto.targetInRange(selfPos, playerPos, self.Range) then
		if not self.tracking or self.behaviorQueue[1] == nil then
			self.tracking = true
			self.behaviorQueue = {}
			table.insert(self.behaviorQueue, self.trackingBehaviors[1])
		end
	elseif self.tracking or self.behaviorQueue[1] == nil then
		self.tracking = false
		self.behaviorQueue = {}
		table.insert(self.behaviorQueue, self.idleBehaviors[1])
		table.insert(self.behaviorQueue, self.idleBehaviors[math.random(1,4)])
	end

	if self.currentBehaviorCompleted == true then
		self.behaviorQueue[1].duration = math.random(self.behaviorQueue[1].durationLower, self.behaviorQueue[1].durationUpper)
		self.t = 0
		self.currentBehaviorCompleted = false
		self.velocityInitial = self.velocity
		self.duration = self.behaviorQueue[1].duration / 2 --divided by 2 for acceleration then deceleration, in order to have the actual duration
		if self.behaviorQueue[1].directionMode == 0 then
			self.currentDirection = enemyProto.derivativeDirection(self.previousDirection, -45, 45)
		elseif self.behaviorQueue[1].directionMode == 1 then
			self.currentDirection = enemyProto.randomDirection()
		elseif self.behaviorQueue[1].directionMode == 2 then
			self.currentDirection = enemyProto.target(go.get_position("/hero_collection/hero"))
		end
		self.velocityGoal = self.currentDirection * self.behaviorQueue[1].speedMultiplier * self.Speed
		enemyProto.delay(self.behaviorQueue[1].duration, "waitB", function()
			self.t = 0
			self.behaviorQueue[1].completionDelay = math.random(self.behaviorQueue[1].completionDelayLower, self.behaviorQueue[1].completionDelayUpper)
			self.duration = self.behaviorQueue[1].completionDelay / 2 --same here
			--self.velocityGoal = vmath.vector3(0)
			self.velocityGoal = enemyProto.derivativeDirection(self.currentDirection, -5, 5) * self.behaviorQueue[1].minSpeedMultiplier * self.Speed
			self.velocityInitial = self.velocity
			enemyProto.delay(self.behaviorQueue[1].completionDelay, "waitB", function()
					self.currentBehaviorCompleted = true
					self.previousDirection = self.currentDirection
					table.remove(self.behaviorQueue, 1)
				end
			)
		end
		)
	end

	--counter for velocity lerping
	--increments by 1 / (the action duration) every second
	self.t = self.t + dt / self.duration
	if self.t > 1 then
		self.t = 1
	end

	enemyProto.rayCast(playerPos)

	handleCollisions(self)
	handleAnimations(self)

	self.velocity = vmath.lerp(self.t, self.velocityInitial, self.velocityGoal)
	go.set(".", "position", selfPos + self.velocity * dt)
	enemyProto.rayCast(playerPos)

	if not self.shooting and self.tracking then
		self.shooting = true
		_ShootingPatterns[self.ShootingPatternID](bulletURL, self)
	end
	if self.Health <= 0 then
		death(self.PointValue)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == _ContactPointHash then
		if message.group == _WallsHash then
			table.insert(self.collisions, {["normal"] = message.normal, ["distance"] = message.distance})
		elseif message.group == _WeaponHash then
			self.Health = self.Health - _WeaponDamage
		end
	elseif message_id == _RaycastResponseHash then
		if message.group == _HeroHash then
			self.playerVisible = true
		else
			self.playerVisible = false
		end
	elseif message_id == _BulletHitHash then
			self.Health = self.Health - message.damage
	elseif message_id == hash("") then

	end
end

--loops through the collisions array, adjusting the enemy's position and direction of movement so that it bounces off at an equal angle
function handleCollisions(self)
	local selfPos = go.get(".", "position")
	for i = 1, #self.collisions do
		local collisionNorm = self.collisions[i]["normal"]
		local collisionDist = self.collisions[i]["distance"]

		if collisionDist > 0 then
			local newpos = selfPos + collisionNorm * collisionDist
			go.set_position(newpos)

			if collisionNorm.x < 0 then
				self.velocity.x = -math.abs(self.velocity.x)
				self.velocityGoal.x = -math.abs(self.velocityGoal.x)
				self.velocityInitial.x = -math.abs(self.velocityInitial.x)
			elseif collisionNorm.x > 0 then
				self.velocity.x = math.abs(self.velocity.x)
				self.velocityGoal.x = math.abs(self.velocityGoal.x)
				self.velocityInitial.x = math.abs(self.velocityInitial.x)
			end

			if collisionNorm.y < 0 then
				self.velocity.y = -math.abs(self.velocity.y)
				self.velocityGoal.y = -math.abs(self.velocityGoal.y)
				self.velocityInitial.y = -math.abs(self.velocityInitial.y)
			elseif collisionNorm.y > 0 then
				self.velocity.y = math.abs(self.velocity.y)
				self.velocityGoal.y = math.abs(self.velocityGoal.y)
				self.velocityInitial.y = math.abs(self.velocityInitial.y)
			end
		end
	end
	--clears the collision array
	self.collisions = {}
end

--handles flipping the sprite and determining which animation to play
function handleAnimations(self)
	enemyProto.flip(self.velocity)
	if math.abs(self.velocity.x) + math.abs(self.velocity.y) > 1 then
		if self.curAnim ~= 1 then
			msg.post("#sprite", "play_animation", {id = hash("run")})
			self.curAnim = 1
		end
	else
		if self.curAnim ~= 2 then
			msg.post("#sprite", "play_animation", {id = hash("idle")})
			self.curAnim = 2
		end
	end
end


function death(points)
	_PlayerScore = _PlayerScore + points
	go.delete()
end