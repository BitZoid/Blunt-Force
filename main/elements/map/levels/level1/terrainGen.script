
Map = {}
local MapWidth = 40  	--Seem to be
local MapHeight = 40	--	reversed?
local PercentAreWalls = 47

-------------------------------------
--Generates a 1 or a 0, depending on the number inputted
--To be used to initialize the map tiles to random states
-------------------------------------
function RandomPercent(percent)
	if percent >= math.random(1,100) then
		return 1
	else
		return 0
	end
end
-------------------------------------

-------------------------------------
--Checks to see if the supplied coordinates fall without
--the bounds of the tilemap
--If the tile is out of bounds, returns true
--
--Used by IsWall(x, y) to use the boundaries as solid tiles when smoothing
-------------------------------------
function IsOutOfBounds(x, y)
	if x<1 or y<1 then
		return true
	elseif x>MapWidth or y>MapHeight then
		return true
	else
		return false
	end
	return false
end
-------------------------------------

-------------------------------------
--Used by GetAdjacentWalls(), checks the state of the tile at the coordinates provided
--Returns a true if the state is 1 or it is outside the scope of the map, and 0 otherwise
-------------------------------------
function IsWall(x, y)
	if IsOutOfBounds(x, y) then
		return true
	end
	if Map[y][x]==1 then
		return true
	end
	if Map[y][x]==0 then
		return false
	end
	return false
end
-------------------------------------

-------------------------------------
--Used in PlaceWallLogic(), counts the amount of walls
--in a certain area around the target tile and returns an integer
-------------------------------------
function GetAdjacentWalls(x, y, scopeX, scopeY)
	local startX = x-scopeX
	local startY = y-scopeY
	local endX = x+scopeX
	local endY = y+scopeY

	local iX = startX
	local iY = startY

	local wallCounter = 0

	for iY = startY, endY do
		for iX = startX, endX do
			if not (iX==x and iY==y) then
				if IsWall(iX,iY) then
					wallCounter = wallCounter + 1
				end
			end
		end
	end
	return wallCounter
end
-------------------------------------

-------------------------------------
--Uses rules similar to those of "Game of Life"
--	to change the state of tiles in a 2d array depending on
--	the state of their neighbors, i.e. a wall tile with 1 neighboring wall tile and
--	7 neighboring floor tiles will change to be a floor tile
--AKA cellular Automata, http://goo.gl/XUbFJq
--When called upon every tile of the 2d array, has a smoothing affect, different depending on 'Da Rules'
-------------------------------------
function PlaceWallLogic(x, y)
	local numWalls = GetAdjacentWalls(x,y,1,1)

	if Map[y][x] == 1 then
		if numWalls >= 4 then
			return 1
		end
		if numWalls < 2 then
			return 0
		end
	else
		if numWalls >=5 then
			return 1
		end
	end
	return 0
end


-------------------------------------
--Iterates through the Map table, calling PlaceWallLogic() on each of the tiles
-------------------------------------
function Refine()
	local tempMap = {}
	for row = 1, MapHeight do
		tempMap[row] = {}
		for col = 1, MapWidth do
			tempMap[row][col] = PlaceWallLogic(col,row)
		end
	end
	Map = tempMap
end
-------------------------------------

-------------------------------------
--Fills the Map table with tables populated with random binary
--to form a 2d map, with solid borders
--Example output
--Map =
--{1, 1 ,1,1,1,1},  Map[y][x] to access specific tiles
--{1, 0 ,1,1,0,1},	Map[5][2] is in brackets as an example of the indexing
--{1, 0 ,1,0,1,1},	Like a book; starts top-left, and ends bottom-right
--{1, 1 ,1,0,0,1},	Keep in mind, Lua is 1-indexed, so Map[0][0] would be out of bounds
--{1,[1],0,1,0,1},		and Map[1][1] would be the first index of the first table
--{1, 1, 1,1,1,1}
-------------------------------------
function RandomFillMap()
	for row = 1, MapHeight do
		Map[row] = {}
		for col = 1, MapWidth do
			if col == 1 then
				Map[row][col] = 1
			elseif row == 1 then
				Map[row][col] = 1
			elseif col == MapWidth then
				Map[row][col] = 1
			elseif row == MapHeight then
				Map[row][col] = 1
			else
				mapMiddle = math.floor(MapHeight/2)
				if row == mapMiddle then
					Map[row][col] = 0
				else
					Map[row][col] = RandomPercent(PercentAreWalls)
				end
			end
		end
	end
end
-------------------------------------



function floodFillCheck()
	local count = 0
	for row=1, MapHeight do
		for col=1, MapWidth do
			if Map[row][col] == 0 then
				count = count+1
			end
		end
	end
	local startX = 0
	local startY = 0

	local fillTestCount
	while startX == 0 and startY == 0  do

		local startTestY = math.random(2,MapHeight)
		local startTestX = math.random(2,MapWidth)
		if Map[startTestX][startTestY] == 0 then
			startX = startTestX
			startY = startTestY

			OpenTiles = {}
			fillTestCount = checkNeighbors(startX, startY)
			print(fillTestCount .. "   " .. count)
		end
	end
	if fillTestCount == count then
		return true
	end
	return false
end

function checkNeighbors(y,x)

	if Map[y][x] == 0 then
		for _, i in pairs(OpenTiles) do
			if x + y*MapWidth == i then
				return 0
			end
		end

		table.insert(OpenTiles, x + y*MapHeight)
		local try1, val1 = pcall(checkNeighbors, y-1, x)
		local try2, val2 = pcall(checkNeighbors, y+1, x)
		local try3, val3 = pcall(checkNeighbors, y, x-1)
		local try4, val4 = pcall(checkNeighbors, y, x+1)
		return 1 + val1 + val2 + val3 + val4
	end
	return 0
end










function init(self)
	--Generates a pseudorandom number for the randomization to utilize
	math.randomseed(os.time()*999999 +1787)
	repeat
		RandomFillMap()
		Refine()
		Refine()
		Refine()
	until floodFillCheck(Map)

	
	for row = 1, MapHeight do
		for col = 1, MapWidth do
			if Map[row][col] == 1 then
				tilemap.set_tile("main:/level#tilemap", "layer1", row, col, 1)
			else
				tilemap.set_tile("main:/level#tilemap", "layer1", row, col, 2)
			end
		end
	end
end
